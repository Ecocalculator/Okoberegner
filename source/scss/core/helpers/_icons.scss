// ---------------------------------------------------------------------------
// Default usage

/*

// Using mixin (must be applied to pseudo element)
// Extends a placeholder selector %icon--button
.button {
  &:before { @include use-icon( button ); }
}

// Icon only (text is hidden)
.arrow {
  @extend %icon-only;
  &:before { @include use-icon( arrow ); }
}

*/

// ---------------------------------------------------------------------------
// Use inside media query

/*

// Forcing style output rather than extending a placeholder selector
.button:before {
  @media (min-width: 320px) {
    @include use-icon( button, true );
  }
}

*/

// ---------------------------------------------------------------------------
// Using icons in BEM syntax

/*
In most cases it's not necessary to use all available icons in a given syntax.
This way, we can hand pick the icons we want to use.
Put # in front of { $name } before use

SCSS
====

.footer {
  &__icon {
    @each $name in facebook, instagram {
      &--{ $name } {
        @extend .icon--{ $name };
      }
    }
  }
}

Output
======

.footer__icon--facebook { ... }
.footer__icon--instagram { ... }

*/


// ---------------------------------------------------------------------------
// Icon helpers

/**
 * Returns an icon symbol base on its name
 * @type  {function}
 * @param {String}  $name       [required] icon name
 */
@function get-icon( $name ) {
  @return map-get( $font-icons, $name );
}

/**
 * Set icon
 * Can be used without $font-icons map
 * Must be applied to a pseudo element (:before, :after)
 * @type  {mixin}
 * @param {String}  $char  [required] hexadecimal letter for the icon
 * @param {Bool}    $force [optional] if set to true, the icon styles
 *                                    are rendered inline rather than
 *                                    through @extend (for embedding
 *                                    in media queries)
 */
@mixin set-icon( $char, $force: false ) {
  content: "#{ $char }";
  @if $force {
    @include icon-base;
  } @else {
    @extend %icon;
  }
}

/**
 * Use icon
 * Requires $font-icons map to be defined
 * Must be applied to a pseudo element (:before, :after)
 * @type  {mixin}
 * @param {String}  $name   [required] name of icon to use
 * @param {Bool}    $force  [optional] if set to true, the icon styles
 *                                     are rendered inline rather than
 *                                     through @extend (for embedding
 *                                     in media queries)
 */
@mixin use-icon( $name, $force: false ) {
  @include set-icon( get-icon( $name ), $force );
}

// ---------------------------------------------------------------------------
// Icon base styles

@mixin icon-base {
  font: {
    family: $icon-font;
    style: normal;
    variant: normal;
    weight: normal;
  }
  height: 1em;
  line-height: 1em;
  speak: none;
  text-indent: 0; // avoiding offset in conjuction with %icon-only
  text-transform: none;

  -moz-osx-font-smoothing: grayscale;
  -webkit-font-smoothing: antialiased;
}

// ---------------------------------------------------------------------------
// Icon placeholder styles

%icon { @include icon-base; }

%icon-only {
  text-indent: -999px;
  overflow: hidden;
  display: inline-block;
  // Fixing view if element is floated
  &:before,
  &:after {
    float: inherit;
  }
}
