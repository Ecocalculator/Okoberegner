@charset "UTF-8";
/**
 * All stylesheet imports
 */
/**
 * This file contains all project settings. To find all available settings,
 * see core/_defaults.scss
 * Put all new variables related to the project modules/partials in this file
 * rather than in core/_defaults.scss
 */
/**
 * =============================================================================
 * General
 */
/**
 * =============================================================================
 * Colors
 */
/**
 * =============================================================================
 * Fonts and Typography
 */
/**
 * =============================================================================
 * Susy grid settings
 */
/**
 * This file contains all project defaults. It's important that these are kept
 * as default values, and should only be changed by overriding them in the
 * _setting.scss in the root of the project.
 *
 *
 * Don't panic. Have a coffee.
 *
 *         {
 *      {   }  }
 *       }_{ __{
 *    .Â´{   }   }`.
 *   (   }     {   )
 *   |`-.._____..-'|
 *   |             ;--.
 *   |            (__  \
 *   |             | )  )
 *   |             |/  /
 *   |             /  /
 *   |            (  /
 *   \             y'
 *    `-.._____..-'
 *
 */
/**
 * =============================================================================
 * General
 */
/**
 * =============================================================================
 * Colors
 */
/**
 * =============================================================================
 * Fonts and Typography
 */
/**
 * =============================================================================
 * Element sizes
 */
/**
 * =============================================================================
 * Screen resolution support
 */
/**
 * =============================================================================
 * Unit settings and fallbacks
 */
/**
 * =============================================================================
 * Vertical rhythm stuff
 * Defaults and functions/mixins found in core/base/helpers/_vertical-rythm.scss
 */
/**
 * =============================================================================
 * Susy grid settings
 */
/**
 * =============================================================================
 * Overlay
 */
/**
 * =============================================================================
 * Icons
 */
/**
 * =============================================================================
 * Sprites
 * (Use icon font if possible)
 */
/*! normalize.css v2.1.2 | MIT License | git.io/normalize */
/* ==========================================================================
   HTML5 display definitions
   ========================================================================== */
/**
 * Correct `block` display not defined in IE 8/9.
 */
article, aside, details, figcaption, figure, footer, header, hgroup, main, nav, section, summary {
  display: block; }

/**
 * Correct `inline-block` display not defined in IE 8/9.
 */
audio, canvas, video {
  display: inline-block; }

/**
 * Prevent modern browsers from displaying `audio` without controls.
 * Remove excess height in iOS 5 devices.
 */
audio:not([controls]) {
  display: none;
  height: 0; }

/**
 * Address styling not present in IE 8/9.
 */
[hidden] {
  display: none; }

/* ==========================================================================
   Base
   ========================================================================== */
/**
 * 1. Set default font family to sans-serif.
 * 2. Prevent iOS text size adjust after orientation change, without disabling
 *    user zoom.
 */
html {
  font-family: sans-serif;
  /* 1 */
  -ms-text-size-adjust: 100%;
  /* 2 */
  -webkit-text-size-adjust: 100%;
  /* 2 */ }

/**
 * Remove default margin.
 */
body {
  margin: 0; }

/* ==========================================================================
   Links
   ========================================================================== */
/**
 * Address `outline` inconsistency between Chrome and other browsers.
 */
a:focus {
  outline: thin dotted; }

/**
 * Improve readability when focused and also mouse hovered in all browsers.
 */
a:active, a:hover {
  outline: 0; }

/* ==========================================================================
   Typography
   ========================================================================== */
/**
 * Address variable `h1` font-size and margin within `section` and `article`
 * contexts in Firefox 4+, Safari 5, and Chrome.
 */
h1 {
  font-size: 2em;
  margin: 0.67em 0; }

/**
 * Address styling not present in IE 8/9, Safari 5, and Chrome.
 */
abbr[title] {
  border-bottom: 1px dotted; }

/**
 * Address style set to `bolder` in Firefox 4+, Safari 5, and Chrome.
 */
b, strong {
  font-weight: bold; }

/**
 * Address styling not present in Safari 5 and Chrome.
 */
dfn {
  font-style: italic; }

/**
 * Address differences between Firefox and other browsers.
 */
hr {
  -moz-box-sizing: content-box;
  box-sizing: content-box;
  height: 0; }

/**
 * Address styling not present in IE 8/9.
 */
mark {
  background: #ff0;
  color: #000; }

/**
 * Correct font family set oddly in Safari 5 and Chrome.
 */
code, kbd, pre, samp {
  font-family: monospace, serif;
  font-size: 1em; }

/**
 * Improve readability of pre-formatted text in all browsers.
 */
pre {
  white-space: pre-wrap; }

/**
 * Set consistent quote types.
 */
q {
  quotes: "\201C" "\201D" "\2018" "\2019"; }

/**
 * Address inconsistent and variable font size in all browsers.
 */
small {
  font-size: 80%; }

/**
 * Prevent `sub` and `sup` affecting `line-height` in all browsers.
 */
sub, sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline; }

sup {
  top: -0.5em; }

sub {
  bottom: -0.25em; }

/* ==========================================================================
   Embedded content
   ========================================================================== */
/**
 * Remove border when inside `a` element in IE 8/9.
 */
img {
  border: 0; }

/**
 * Correct overflow displayed oddly in IE 9.
 */
svg:not(:root) {
  overflow: hidden; }

/* ==========================================================================
   Figures
   ========================================================================== */
/**
 * Address margin not present in IE 8/9 and Safari 5.
 */
figure {
  margin: 0; }

/* ==========================================================================
   Forms
   ========================================================================== */
/**
 * Define consistent border, margin, and padding.
 */
fieldset {
  border: 1px solid #c0c0c0;
  margin: 0 2px;
  padding: 0.35em 0.625em 0.75em; }

/**
 * 1. Correct `color` not being inherited in IE 8/9.
 * 2. Remove padding so people aren't caught out if they zero out fieldsets.
 */
legend {
  border: 0;
  /* 1 */
  padding: 0;
  /* 2 */ }

/**
 * 1. Correct font family not being inherited in all browsers.
 * 2. Correct font size not being inherited in all browsers.
 * 3. Address margins set differently in Firefox 4+, Safari 5, and Chrome.
 */
button, input, select, textarea {
  font-family: inherit;
  /* 1 */
  font-size: 100%;
  /* 2 */
  margin: 0;
  /* 3 */ }

/**
 * Address Firefox 4+ setting `line-height` on `input` using `!important` in
 * the UA stylesheet.
 */
button, input {
  line-height: normal; }

/**
 * Address inconsistent `text-transform` inheritance for `button` and `select`.
 * All other form control elements do not inherit `text-transform` values.
 * Correct `button` style inheritance in Chrome, Safari 5+, and IE 8+.
 * Correct `select` style inheritance in Firefox 4+ and Opera.
 */
button, select {
  text-transform: none; }

/**
 * 1. Avoid the WebKit bug in Android 4.0.* where (2) destroys native `audio`
 *    and `video` controls.
 * 2. Correct inability to style clickable `input` types in iOS.
 * 3. Improve usability and consistency of cursor style between image-type
 *    `input` and others.
 */
button, html [type="button"], [type="reset"], [type="submit"] {
  -webkit-appearance: button;
  /* 2 */
  cursor: pointer;
  /* 3 */ }

/**
 * Re-set default cursor for disabled elements.
 */
button[disabled], html input[disabled] {
  cursor: default; }

/**
 * 1. Address box sizing set to `content-box` in IE 8/9.
 * 2. Remove excess padding in IE 8/9.
 */
[type="checkbox"], [type="radio"] {
  box-sizing: border-box;
  /* 1 */
  padding: 0;
  /* 2 */ }

/**
 * 1. Address `appearance` set to `searchfield` in Safari 5 and Chrome.
 * 2. Address `box-sizing` set to `border-box` in Safari 5 and Chrome
 *    (include `-moz` to future-proof).
 */
[type="search"] {
  -webkit-appearance: textfield;
  /* 1 */
  -moz-box-sizing: content-box;
  -webkit-box-sizing: content-box;
  /* 2 */
  box-sizing: content-box; }

/**
 * Remove inner padding and search cancel button in Safari 5 and Chrome
 * on OS X.
 */
[type="search"]::-webkit-search-cancel-button, [type="search"]::-webkit-search-decoration {
  -webkit-appearance: none; }

/**
 * Remove inner padding and border in Firefox 4+.
 */
button::-moz-focus-inner, input::-moz-focus-inner {
  border: 0;
  padding: 0; }

/**
 * 1. Remove default vertical scrollbar in IE 8/9.
 * 2. Improve readability and alignment in all browsers.
 */
textarea {
  overflow: auto;
  /* 1 */
  vertical-align: top;
  /* 2 */ }

/* ==========================================================================
   Tables
   ========================================================================== */
/**
 * Remove most spacing between table cells.
 */
table {
  border-collapse: collapse;
  border-spacing: 0; }

/**
 * Import all helper functions and mixins from the core/helpers directory
 */
/**
 * Font-size wrapper using our rem converter mixin
 * Examples:
 * @include font-size(14px);
 * @include font-size(24px, 1.2);
 * @include font-size(16px, 24px);
 */
/**
 * Responsive font size mixin
 * Input arguments containing:
 * 1. font size (px),
 * 2. line height
 * 3. layout name
 *
 * Font size is required. line height and layout are optional, but must be in
 * order according to above
 *
 * Example:
 * @include font-sizes(14px 1.5, 16px large, 18px 24px xlarge, 22px 1.2 xxlarge);
 */
.clearfix {
  *zoom: 1; }
  .clearfix:before, .clearfix:after {
    content: " ";
    display: table; }
  .clearfix:after {
    clear: both; }

/*

// Using mixin (must be applied to pseudo element)
// Extends a placeholder selector %icon--button
.button {
  &:before { @include use-icon( button ); }
}

// Icon only (text is hidden)
.arrow {
  @extend %icon-only;
  &:before { @include use-icon( arrow ); }
}

*/
/*

// Forcing style output rather than extending a placeholder selector
.button:before {
  @media (min-width: 320px) {
    @include use-icon( button, true );
  }
}

*/
/*
In most cases it's not necessary to use all available icons in a given syntax.
This way, we can hand pick the icons we want to use.
Put # in front of { $name } before use

SCSS
====

.footer {
  &__icon {
    @each $name in facebook, instagram {
      &--{ $name } {
        @extend .icon--{ $name };
      }
    }
  }
}

Output
======

.footer__icon--facebook { ... }
.footer__icon--instagram { ... }

*/
/**
 * Returns an icon symbol base on its name
 * @type  {function}
 * @param {String}  $name       [required] icon name
 */
/**
 * Set icon
 * Can be used without $font-icons map
 * Must be applied to a pseudo element (:before, :after)
 * @type  {mixin}
 * @param {String}  $char  [required] hexadecimal letter for the icon
 * @param {Bool}    $force [optional] if set to true, the icon styles
 *                                    are rendered inline rather than
 *                                    through @extend (for embedding
 *                                    in media queries)
 */
/**
 * Use icon
 * Requires $font-icons map to be defined
 * Must be applied to a pseudo element (:before, :after)
 * @type  {mixin}
 * @param {String}  $name   [required] name of icon to use
 * @param {Bool}    $force  [optional] if set to true, the icon styles
 *                                     are rendered inline rather than
 *                                     through @extend (for embedding
 *                                     in media queries)
 */
.navigation__item--search:after, .navigation__item--shop:after, .navigation__item--plan:after, .navigation__item--meal:after, .navigation__item--profile:after, .navigation__item--settings:after {
  font-family: "icons";
  font-style: normal;
  font-variant: normal;
  font-weight: normal;
  height: 1em;
  line-height: 1em;
  speak: none;
  text-indent: 0;
  text-transform: none;
  -moz-osx-font-smoothing: grayscale;
  -webkit-font-smoothing: antialiased; }

/**
 * Import all base styles from the core/base directory
 */
/**
 * Misc. base styles.
 * <body> styles and so on...
 */
body {
  color: #555;
  font-family: "roboto", "Helvetica Neue", sans-serif;
  font-size: 1em;
  font-weight: 300;
  line-height: 1.5;
  margin: 0 auto;
  background-color: #262626; }

/**
 * All typography styles go here: headers, paragraphs, links etc.
 */
h1, h2, h3, h4, h5, h6 {
  color: #333;
  margin: 24px 0; }

h1 {
  font-size: 40px; }

h2 {
  font-size: 26px; }

h3 {
  font-size: 18px; }

h4 {
  font-size: 16px; }

h5 {
  font-size: 14px; }

h6 {
  font-size: 12px; }

p {
  margin:  1.5px/px/rem 0; }

hr {
  border: none;
  border-bottom: 1px solid #ddd;
  margin:  1.5px/px/rem 0; }

a {
  color: #015AA3;
  text-decoration: underline; }
  a:hover, a:focus, a:active {
    color: #0184ef;
    text-decoration: none; }
  a:focus, a:active {
    box-shadow: 0;
    outline: none; }

::selection {
  background: #b7ecff;
  color: #313054;
  text-shadow: none; }

::-moz-selection {
  background: #b7ecff;
  color: #313054;
  text-shadow: none; }

em {
  font-style: italic; }

strong {
  font-weight: bold; }

code, pre {
  background-color: #e7e7e7;
  border-radius: 3px;
  border: 1px solid #dddddd;
  color: #000;
  font-family: monospace, serif;
  padding: 0.1em 0.3em; }

pre {
  margin:  1.5px/px/rem 0;
  padding:  0.375px/px/rem 0.5px/px/rem; }

/**
 * Form element base styles
 */
textarea, [type="url"], [type="file"], [type="text"], [type="date"], [type="time"], [type="week"], [type="email"], [type="month"], [type="color"], [type="number"], [type="search"], [type="password"], [type="datetime"], [type="datetime-local"] {
  border: 1px solid #ddd;
  font-weight: inherit;
  padding:  0.5px/px/rem 0.375px/px/rem; }

/**
 * FIXME:
 * The presence of a legend throws off the vertical rhythm
 * There seems to be a gap that isn't caused by margin or padding
 */
legend {
  padding:  0 0.125px/px/rem; }

/**
 * List and definition list base styles
 */
ol, ul {
  margin: 24px 0;
  padding-left: 36px; }
  ol ol, ul ul {
    margin: 0; }

dl {
  margin: 24px 0; }

dt {
  font-weight: bold; }

dd {
  margin-left: 30px; }

dd + dt {
  margin-top: 12px; }

/**
 * Table base styles
 */
table {
  margin:  1.5px/px/rem 0; }

/**
 * Blockquote base styles
 */
/**
 * Markup examples:
 * -----------------------------------------------------------------------------

<blockquote cite="http://">
  <p>Quote</p>
  <cite>Cite</cite>
</blockquote>

<blockquote>
  <p>Quote</p>
  <footer>Person - <cite>Source</cite></footer>
</blockquote>

 * -----------------------------------------------------------------------------
 */
blockquote {
  margin:  1.5px/px/rem 0; }

/**
 * Import all local fonts using bullet-proof method
 */
/**
 * =============================================================================
 * Icon font
 * Using fonts for icons rather than svg only means IE8 and old Android (v4.3)
 * is supported.
 * Also using a font is similar to using a sprite, as only one HTTP request is
 * needed.
 */
@font-face {
  font-family: "icons";
  src: url("../fonts/icons/icons.eot");
  src: url("../fonts/icons/icons.eot?#iefix") format("embedded-opentype"), url("../fonts/icons/icons.woff") format("woff"), url("../fonts/icons/icons.ttf") format("truetype"), url("../fonts/icons/icons.svg#icons") format("svg"); }

/**
 * =============================================================================
 * Project font
 * Use only one font family name for several imports, and set font weight/style
 * on the individual imports.
 */
@font-face {
  font-family: "roboto";
  src: url("../fonts/roboto-thin/Roboto-Thin-webfont.eot");
  src: url("../fonts/roboto-thin/Roboto-Thin-webfont.eot?#iefix") format("embedded-opentype"), url("../fonts/roboto-thin/Roboto-Thin-webfont.woff") format("woff"), url("../fonts/roboto-thin/Roboto-Thin-webfont.ttf") format("truetype"), url("../fonts/roboto-thin/Roboto-Thin-webfont.svg#robotothin") format("svg");
  font-weight: 200;
  font-style: normal; }

@font-face {
  font-family: "roboto";
  src: url("../fonts/roboto-light/Roboto-Light-webfont.eot");
  src: url("../fonts/roboto-light/Roboto-Light-webfont.eot?#iefix") format("embedded-opentype"), url("../fonts/roboto-light/Roboto-Light-webfont.woff") format("woff"), url("../fonts/roboto-light/Roboto-Light-webfont.ttf") format("truetype"), url("../fonts/roboto-light/Roboto-Light-webfont.svg#robotolight") format("svg");
  font-weight: 300;
  font-style: normal; }

@font-face {
  font-family: "roboto";
  src: url("../fonts/roboto-lightitalic/Roboto-LightItalic-webfont.eot");
  src: url("../fonts/roboto-lightitalic/Roboto-LightItalic-webfont.eot?#iefix") format("embedded-opentype"), url("../fonts/roboto-lightitalic/Roboto-LightItalic-webfont.woff") format("woff"), url("../fonts/roboto-lightitalic/Roboto-LightItalic-webfont.ttf") format("truetype"), url("../fonts/roboto-lightitalic/Roboto-LightItalic-webfont.svg#lightitalic") format("svg");
  font-weight: 300;
  font-style: italic; }

@font-face {
  font-family: "roboto";
  src: url("../fonts/roboto-medium/Roboto-Medium-webfont.eot");
  src: url("../fonts/roboto-medium/Roboto-Medium-webfont.eot?#iefix") format("embedded-opentype"), url("../fonts/roboto-medium/Roboto-Medium-webfont.woff") format("woff"), url("../fonts/roboto-medium/Roboto-Medium-webfont.ttf") format("truetype"), url("../fonts/roboto-medium/Roboto-Medium-webfont.svg#robotomedium") format("svg");
  font-weight: 400;
  font-style: normal; }

@font-face {
  font-family: "roboto";
  src: url("../fonts/roboto-bold/Roboto-Bold-webfont.eot");
  src: url("../fonts/roboto-bold/Roboto-Bold-webfont.eot?#iefix") format("embedded-opentype"), url("../fonts/roboto-bold/Roboto-Bold-webfont.woff") format("woff"), url("../fonts/roboto-bold/Roboto-Bold-webfont.ttf") format("truetype"), url("../fonts/roboto-bold/Roboto-Bold-webfont.svg#robotobold") format("svg");
  font-weight: 600;
  font-style: normal; }

/**
 * UI Components:
 * Buttons
 */
/**
 * Put navigation components here
 * Such as navigations arrows, bullet navigation etc.
 */
/**
 * UI Components:
 * Blockquote
 */
.blockquote {
  border-left: 5px solid #ddd;
  margin-left: 0;
  padding:  0.625px/px/rem 0 0.625px/px/rem 1.25px/px/rem; }
  .blockquote p {
    margin: 0; }
  .blockquote footer, .blockquote cite {
    color: #999;
    font-size: 12px; }
  .blockquote footer:before {
    content: "\2013";
    display: inline; }
  .blockquote footer cite {
    display: inline; }
  .blockquote cite {
    font-style: italic; }

/**
 * UI Components:
 * Tables
 */
.table {
  border: 1px solid #ddd; }
  .table thead tr, .table tfoot tr {
    background-color: #e7e7e7; }
  .table tbody tr:nth-of-type(even) {
    background-color: #f9f9f9; }
  .table caption, .table th, .table td {
    border: 1px solid #ddd;
    padding:  0.5px/px/rem 0.75px/px/rem; }
  .table caption {
    border-bottom: none; }

/**
 * UI Components:
 * Lists
 */
/**
 * Put media components here
 * Such as containers for video, iframe styling etc.
 */
.responsive-video--4x3 {
  background-color: #e7e7e7;
  height: 0;
  max-width: 100%;
  overflow: hidden;
  position: relative; }

.responsive-video--4x3 iframe {
  position: absolute;
  top: 0;
  left: 0;
  height: 100% !important;
  width: 100% !important; }

.responsive-video--4x3 {
  padding-bottom: 75%; }

/**
 * General layouts
 * Individual modules should have their own partial
 */
.content {
  width: 100%; }
  @media (min-width: 30em) {
    .content {
      width: 85%;
      float: left;
      margin-left: 1.25%;
      margin-right: 1.25%;
      margin-left: 13.75%; } }
  @media (min-width: 48em) {
    .content {
      width: 90%;
      float: left;
      margin-left: 0.83333%;
      margin-right: 0.83333%;
      margin-left: 9.16667%; } }

.container {
  max-width: 78.75em;
  margin-left: auto;
  margin-right: auto; }
  .container:after {
    content: " ";
    display: block;
    clear: both; }
  @media (min-width: 30em) {
    .container {
      padding-left: 0.625em;
      padding-right: 0.625em; } }

/**
 * Global navigation styles
 * Put such things as top nav and side nav in this partial
 */
.navigation {
  background-color: #404040;
  display: none;
  font-family: "roboto";
  font-size: 12px;
  font-weight: 200;
  height: 100%;
  overflow: hidden;
  position: fixed; }
  @media (min-width: 30em) {
    .navigation {
      display: block;
      width: 10%; } }
  @media (min-width: 48em) {
    .navigation {
      width: 6.66667%; } }
  .navigation__top {
    margin-top: 20px; }
  .navigation__container {
    height: 100%;
    position: relative; }
  .navigation__item, .navigation__item--search, .navigation__item--shop, .navigation__item--plan, .navigation__item--meal, .navigation__item--profile, .navigation__item--settings {
    color: #bfbfbf;
    display: block;
    margin-bottom: 25px;
    position: relative;
    text-decoration: none;
    text-align: center;
    -webkit-transition: color 0.3s ease-in-out;
    -moz-transition: color 0.3s ease-in-out;
    -ms-transition: color 0.3s ease-in-out;
    -o-transition: color 0.3s ease-in-out;
    transition: color 0.3s ease-in-out; }
    .navigation__item.is-active, .is-active.navigation__item--search, .is-active.navigation__item--shop, .is-active.navigation__item--plan, .is-active.navigation__item--meal, .is-active.navigation__item--profile, .is-active.navigation__item--settings, .navigation__item:hover, .navigation__item--search:hover, .navigation__item--shop:hover, .navigation__item--plan:hover, .navigation__item--meal:hover, .navigation__item--profile:hover, .navigation__item--settings:hover {
      color: #fff; }
      .navigation__item.is-active .navigation__text, .is-active.navigation__item--search .navigation__text, .is-active.navigation__item--shop .navigation__text, .is-active.navigation__item--plan .navigation__text, .is-active.navigation__item--meal .navigation__text, .is-active.navigation__item--profile .navigation__text, .is-active.navigation__item--settings .navigation__text, .navigation__item:hover .navigation__text, .navigation__item--search:hover .navigation__text, .navigation__item--shop:hover .navigation__text, .navigation__item--plan:hover .navigation__text, .navigation__item--meal:hover .navigation__text, .navigation__item--profile:hover .navigation__text, .navigation__item--settings:hover .navigation__text {
        color: #fff; }
    .navigation__item:after, .navigation__item--search:after, .navigation__item--shop:after, .navigation__item--plan:after, .navigation__item--meal:after, .navigation__item--profile:after, .navigation__item--settings:after {
      font-size: 28px;
      position: absolute;
      left: 50%;
      top: 0;
      transform: translate(-50%, 0); }
    .navigation__item--search:after {
      content: "\e986"; }
    .navigation__item--shop:after {
      content: "\e93a"; }
    .navigation__item--plan:after {
      content: "\e953"; }
    .navigation__item--meal:after {
      content: "\e9a3"; }
    .navigation__item--profile:after {
      content: "\e971"; }
    .navigation__item--settings:after {
      content: "\e994"; }
  .navigation__text {
    color: #404040;
    display: block;
    padding-top: 30px;
    -webkit-transition: color 0.3s ease-in-out;
    -moz-transition: color 0.3s ease-in-out;
    -ms-transition: color 0.3s ease-in-out;
    -o-transition: color 0.3s ease-in-out;
    transition: color 0.3s ease-in-out; }
  .navigation__bottom {
    position: relative;
    bottom: 0; }

/**
 * Recipes list
 */
.recipes-list__item {
  background: #000;
  box-sizing: border-box;
  cursor: pointer;
  height: auto;
  max-height: 360px;
  max-width: 480px;
  overflow: hidden;
  position: relative;
  text-align: center;
  margin-bottom: 20px; }
  @media (min-width: 30em) {
    .recipes-list__item {
      width: 47.5%;
      float: left;
      margin-left: 1.25%;
      margin-right: 1.25%; } }
  @media (min-width: 48em) {
    .recipes-list__item {
      width: 31.66667%;
      float: left;
      margin-left: 0.83333%;
      margin-right: 0.83333%; } }
  @media (min-width: 80.0625em) {
    .recipes-list__item {
      width: 23.33333%;
      float: left;
      margin-left: 0.83333%;
      margin-right: 0.83333%; } }
  .recipes-list__item:hover .recipes-list__picture {
    opacity: 0.4;
    transform: scale3d(1.1, 1.1, 1); }
  .recipes-list__item:hover .recipes-list__text {
    transform: translate3d(0, 0, 0); }
.recipes-list__picture {
  backface-visibility: hidden;
  height: 400px;
  max-width: none;
  opacity: 0.8;
  transform: scale3d(1, 1, 1);
  -webkit-transition: all 1s ease-in-out;
  -moz-transition: all 1s ease-in-out;
  -ms-transition: all 1s ease-in-out;
  -o-transition: all 1s ease-in-out;
  transition: all 1s ease-in-out; }
.recipes-list__link {
  font-size: 0;
  opacity: 0;
  text-indent: 200%;
  white-space: nowrap;
  z-index: 1000; }
.recipes-list__text-container {
  backface-visibility: hidden;
  box-sizing: border-box;
  color: #fff;
  height: 100%;
  padding: 2em;
  position: absolute;
  left: 0;
  top: 0;
  text-transform: uppercase;
  width: 100%; }
.recipes-list__headline {
  color: #fff;
  position: relative;
  padding: 10px 0;
  font-weight: 300; }
  .recipes-list__headline--light {
    font-weight: 800; }
.recipes-list__text {
  display: inline-block;
  margin: 0 0 0.25em;
  padding: 0.4em 1em;
  background: rgba(255, 255, 255, 0.9);
  color: #2f3238;
  text-transform: none;
  font-weight: 500;
  font-size: 75%;
  transform: translate3d(0, 230px, 0);
  -webkit-transition: transform 0.35s ease-in-out;
  -moz-transition: transform 0.35s ease-in-out;
  -ms-transition: transform 0.35s ease-in-out;
  -o-transition: transform 0.35s ease-in-out;
  transition: transform 0.35s ease-in-out; }
  .recipes-list__text:first-child {
    transition-delay: 0s; }
  .recipes-list__text:first-child + p {
    transition-delay: 0.05s; }
  .recipes-list__text:first-child + p + p {
    transition-delay: 0.1s; }


/*# sourceMappingURL=data:application/json;base64, */